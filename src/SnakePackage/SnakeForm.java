/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SnakePackage;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Nic
 */
public class SnakeForm extends javax.swing.JFrame {

    private final int MAX_GRID_SIZE = 20;
    
    private Tile grid[][]; // The grid of game tiles
    
    private int gridSize = 10; // Size of the grid
    private int gameSpeed = 6; // The game speed
    private String gameMode = "classic"; // The current gamemode
    private int currentXP = 0; // XP gained during the current game
    
    private boolean firstStart = true; // If a game has been started at all
    private boolean gameRunning = false; // If a game is currently in session
    private int survivalCounter = 0; // Counter for survival game mode. Used to add/remove tails
    private int crazyCounter = 0; // Counter for crazy game mode. Used to spawn gem/health
    
    private Player plr; // The player object
    private Gem gm; // The gem object
    private Health health; // The health object
    private Timer tmr; // Main game timer
    private List<XPLabel> XPLabels = new ArrayList<XPLabel>();; // The XP Labels
    
    
    //<editor-fold defaultstate="collapsed" desc=" Auto-generated stuff I don't care about">
        
    /**
     * Creates new form SnakeForm
     */
    public SnakeForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGameMode = new javax.swing.ButtonGroup();
        btnStart = new javax.swing.JButton();
        pnlGameMode = new javax.swing.JPanel();
        rbClassic = new javax.swing.JRadioButton();
        rbSurvival = new javax.swing.JRadioButton();
        rbCrazy = new javax.swing.JRadioButton();
        pnlSettings = new javax.swing.JPanel();
        cbWrap = new javax.swing.JCheckBox();
        sliderGridSize = new javax.swing.JSlider();
        lblGridSize = new javax.swing.JLabel();
        lblSpeed = new javax.swing.JLabel();
        sliderSpeed = new javax.swing.JSlider();
        cbShowGrid = new javax.swing.JCheckBox();
        lblBaseXP = new javax.swing.JLabel();
        btnHelp = new javax.swing.JButton();
        pnlMain = new javax.swing.JLayeredPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        pnlGameMode.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Game Mode", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        buttonGroupGameMode.add(rbClassic);
        rbClassic.setSelected(true);
        rbClassic.setText("Classic");

        buttonGroupGameMode.add(rbSurvival);
        rbSurvival.setText("Survival");

        buttonGroupGameMode.add(rbCrazy);
        rbCrazy.setText("Crazy");
        rbCrazy.setToolTipText("");

        javax.swing.GroupLayout pnlGameModeLayout = new javax.swing.GroupLayout(pnlGameMode);
        pnlGameMode.setLayout(pnlGameModeLayout);
        pnlGameModeLayout.setHorizontalGroup(
            pnlGameModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGameModeLayout.createSequentialGroup()
                .addGroup(pnlGameModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbClassic)
                    .addComponent(rbSurvival)
                    .addComponent(rbCrazy))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlGameModeLayout.setVerticalGroup(
            pnlGameModeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGameModeLayout.createSequentialGroup()
                .addComponent(rbClassic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbSurvival)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbCrazy))
        );

        pnlSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        cbWrap.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cbWrap.setText("Wrap Around");
        cbWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbWrapActionPerformed(evt);
            }
        });

        sliderGridSize.setMajorTickSpacing(5);
        sliderGridSize.setMaximum(20);
        sliderGridSize.setMinimum(1);
        sliderGridSize.setMinorTickSpacing(1);
        sliderGridSize.setPaintTicks(true);
        sliderGridSize.setSnapToTicks(true);
        sliderGridSize.setValue(10);
        sliderGridSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGridSizeStateChanged(evt);
            }
        });

        lblGridSize.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblGridSize.setText("Grid Size: 10x10");

        lblSpeed.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblSpeed.setText("Game Speed: 9");

        sliderSpeed.setMajorTickSpacing(5);
        sliderSpeed.setMaximum(11);
        sliderSpeed.setMinimum(1);
        sliderSpeed.setMinorTickSpacing(1);
        sliderSpeed.setPaintTicks(true);
        sliderSpeed.setSnapToTicks(true);
        sliderSpeed.setValue(9);
        sliderSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderSpeedStateChanged(evt);
            }
        });

        cbShowGrid.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cbShowGrid.setSelected(true);
        cbShowGrid.setText("Show Grid");

        lblBaseXP.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblBaseXP.setText("Base XP: 26");

        btnHelp.setText("?");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSettingsLayout = new javax.swing.GroupLayout(pnlSettings);
        pnlSettings.setLayout(pnlSettingsLayout);
        pnlSettingsLayout.setHorizontalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderSpeed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(sliderGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(pnlSettingsLayout.createSequentialGroup()
                        .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbShowGrid)
                            .addComponent(cbWrap)
                            .addComponent(lblGridSize)
                            .addComponent(lblSpeed)
                            .addGroup(pnlSettingsLayout.createSequentialGroup()
                                .addComponent(lblBaseXP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHelp)))
                        .addGap(0, 33, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlSettingsLayout.setVerticalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblGridSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSpeed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbWrap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbShowGrid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBaseXP)
                    .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlMain.setPreferredSize(new java.awt.Dimension(440, 440));
        pnlMain.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pnlMainKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 438, Short.MAX_VALUE)
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 438, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlGameMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlGameMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //</editor-fold>
    
    
    
    /** TO DO
     * Player doesn't have to press button to reset, any key press instead
     * GAME OVER label saying xp, gems collected etc
     * Save xp to file
     * 
     */
    
    
    
    /**
     * Starts or resets a game 
     */
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        
        // Sets game settings
        gridSize = sliderGridSize.getValue();
        gameSpeed = 600 - (sliderSpeed.getValue() * 50);
        tmr.setDelay(gameSpeed);
        tmr.start();
        
        
        // Sets all tiles to invisible
        for(int i = 0; i < MAX_GRID_SIZE; i++)
        {
            for(int j = 0; j < MAX_GRID_SIZE; j++)
            {
                grid[i][j].setVisible(false);
            }
        }
        
        
        // Grid
        for(int i = 0; i < gridSize; i++)
        {
            for(int j = 0; j < gridSize; j++)
            {
                grid[i][j].setVisible(true);
                grid[i][j].setSize(gridSize, pnlMain.getHeight());
                grid[i][j].setPos(i, j);
                grid[i][j].setBackground(new Color(50, 50, 50, 50));
                
                // Shows/hides grid lines
                if(cbShowGrid.isSelected()) {
                    grid[i][j].setBorder(BorderFactory.createLineBorder(Color.black));
                }
                else {
                    grid[i][j].setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
                }
            }
        }
        
        
        // Disables controls
        enableControls(false);
        pnlMain.requestFocus();
        
        
        // Player
        plr.setSize(gridSize, pnlMain.getHeight());
        plr.setPos(gridSize / 2, gridSize / 2);
        plr.setColor(Color.red);
        plr.setNextDirection("up");
        plr.setLastDirection("up");
        plr.removeAllTails();
        
        
        // Gem
        gm.setSize(gridSize, pnlMain.getHeight());
        gm.setPos((gridSize / 2) - 1, (gridSize / 2) - 1);
        gm.setColor(Color.blue);
            
        
        // Crazy game mode
        if(rbCrazy.isSelected()) {
            health.setSize(gridSize, pnlMain.getHeight());
            health.setPos(-1, -1);
            health.setColor(Color.magenta);
        }
        
        
        // Resets values
        survivalCounter = 0;
        crazyCounter = 0;
        
        
        // Repaints the panel
        pnlMain.revalidate();
        pnlMain.repaint();
    }//GEN-LAST:event_btnStartActionPerformed

   
    /**
     * Timer for the main game
     */
    ActionListener tmrTick = new ActionListener() {
        public void actionPerformed(ActionEvent actionEvent) {
            System.out.println("TICK");
            
            
            // Moves the player and their segments
            plr.move(cbWrap.isSelected());
            
            
            // Checks for player/segment/wall collisions
            if(plr.collision(gridSize, cbWrap.isSelected()) == true) {
                
                tmr.stop();
                enableControls(true);
                System.out.println("GAME OVER");
            }
            
            
            // Checks for gem collision
            if(plr.getRow() == gm.getRow() && plr.getCol() == gm.getCol()) {
                
                plr.addTail();
                
                // Checks if player has max possible segments
                if(plr.segmentCount() >= (gridSize * gridSize) - 1) {
                    tmr.stop();
                    enableControls(true);
                    System.out.println("Max segments reached. Huge xp reward!");
                }
                
                
                moveGem();
                crazyCounter++;
                
                
                // Shows xp
                int newXP = calculateXP();
                currentXP += newXP;
                XPLabel xp = new XPLabel(newXP, plr.getX(), plr.getY());
                pnlMain.add(xp, 0);
                XPLabels.add(xp);
            }
            
            
            // Checks for health collision
            if(plr.getRow() == health.getRow() && plr.getCol() == health.getCol()) {
                
                // Makes health invisible and gem visible
                health.setPos(-1, -1);
                moveGem();
                crazyCounter = 0;
                
                
                // Removes 5 tails from the player
                for(int i = 0; i < 5; i++) {
                    plr.removeTail();
                }
                
                
                // XP reward
                int newXP = calculateXP();
                currentXP += newXP;
                XPLabel xp = new XPLabel(newXP, plr.getX(), plr.getY());
                pnlMain.add(xp, 0);
                XPLabels.add(xp);
            }
            
            
            // Game modes
            if(rbClassic.isSelected() == true) {
                
            }
            if(rbSurvival.isSelected() == true) {
                switch(survivalCounter) {
                    case 0:
                    case 1:
                        plr.addTail();
                        survivalCounter++;
                        break;
                    case 2:
                        plr.removeTail();
                        survivalCounter = 0;
                        break;
                }
            }
            if(rbCrazy.isSelected()) {
                if(crazyCounter > 9) {
                    gm.setPos(-1, -1);
                    moveHealth();
                    crazyCounter = 0;
                }
            }
            
            
            // Removes XP labels
            for(int i = 0; i < XPLabels.size(); i++) {
                if(XPLabels.get(i).destroy == true) {
                    pnlMain.remove(XPLabels.get(i));
                    XPLabels.remove(i);
                    System.gc();
                }
            }
            
            
            // Repaints the panel
            pnlMain.revalidate();
            pnlMain.repaint();
        }
    };
    
    
    /**
     * Adjusts the grid size 
     */
    private void sliderGridSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGridSizeStateChanged
        int size = sliderGridSize.getValue();
        lblGridSize.setText("Grid Size: " + size + "x" + size);
        updateXPLabel();
    }//GEN-LAST:event_sliderGridSizeStateChanged

    
    /**
     * Adjusts the game speed 
     */
    private void sliderSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderSpeedStateChanged
        int speed = sliderSpeed.getValue();
        lblSpeed.setText("Game Speed: " + speed);
        updateXPLabel();
    }//GEN-LAST:event_sliderSpeedStateChanged

    
    /**
     * Form load
     * Timer, grid, player, and gem are all created
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        if(firstStart == true) {
            
            // Timer
            tmr = new Timer(gameSpeed, tmrTick);
            
            // Tiles
            grid = new Tile[MAX_GRID_SIZE][MAX_GRID_SIZE];
            for(int i = 0; i < MAX_GRID_SIZE; i++)
            {
                for(int j = 0; j < MAX_GRID_SIZE; j++)
                {
                    Tile tle = new Tile();
                    grid[i][j] = tle;
                    pnlMain.add(tle, 3);
                }
            }
            
            
            // Player
            plr = new Player(pnlMain);
            pnlMain.add(plr, 1);
            plr.setSize(gridSize, pnlMain.getHeight());
            plr.setPos(gridSize / 2, gridSize / 2);
            plr.setColor(Color.red);
            plr.setNextDirection("up");
            
        
            // Gem
            gm = new Gem();
            gm.setSize(gridSize, pnlMain.getHeight());
            gm.setPos((gridSize / 2) - 1, (gridSize / 2) - 1);
            gm.setColor(Color.blue);
            pnlMain.add(gm, 1);
            
            
            // Health
            health = new Health();
            health.setSize(gridSize, pnlMain.getHeight());
            health.setPos(-1, -1);
            health.setColor(Color.magenta);
            pnlMain.add(health, 1);
            
            
            btnStart.setText("Start");
            firstStart = false;
        }
    }//GEN-LAST:event_formWindowOpened

    
    private void pnlMainKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlMainKeyPressed
        
        switch(evt.getKeyChar()) {
            case 'w':
                plr.setNextDirection("up");
                break;
            case 'a':
                plr.setNextDirection("left");
                break;
            case 's':
                plr.setNextDirection("down");
                break;
            case 'd':
                plr.setNextDirection("right");
                break;
            case 'm':
                plr.removeTail();
                break;
        }
    }//GEN-LAST:event_pnlMainKeyPressed

    
    private void cbWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbWrapActionPerformed
        updateXPLabel();
    }//GEN-LAST:event_cbWrapActionPerformed

    
    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        
        JOptionPane.showMessageDialog(null, "Base XP is the XP you normally gain from collecting a gem. "
                                            + "Your base XP per gem is calculated using:\n\n- Game Speed\n- Grid Size\n- Gems Collected\n- Whether wrap is turned on/off\n\n"
                                            + "You can see how these settings affect your base XP by changing their values and seeing the result in the text beside this button.\n"
                                            + "Your XP gained after collecting a gem is multiplied once for every 10 tail segments you have." );

    }//GEN-LAST:event_btnHelpActionPerformed

    
    /**
     * Spawns a gem in a random location
     */
    private void moveGem() {
        
        // Gets valid row/col
        int r = ThreadLocalRandom.current().nextInt(0, gridSize);
        int c = ThreadLocalRandom.current().nextInt(0, gridSize);
        
        while(plr.isValidLocation(r, c) == false) {
            r = ThreadLocalRandom.current().nextInt(0, gridSize);
            c = ThreadLocalRandom.current().nextInt(0, gridSize);
        }
        
        
        // Sets gem position
        gm.setPos(r, c);
    }
    
    
    /**
     * Spawns a health gem in a random location
     */
    private void moveHealth() {
        
        // Gets valid row/col
        int r = ThreadLocalRandom.current().nextInt(0, gridSize);
        int c = ThreadLocalRandom.current().nextInt(0, gridSize);
        
        while(plr.isValidLocation(r, c) == false) {
            r = ThreadLocalRandom.current().nextInt(0, gridSize);
            c = ThreadLocalRandom.current().nextInt(0, gridSize);
        }
        
        
        // Sets gem position
        health.setPos(r, c);
    }
    
    
    /**
     * Disables/enables all controls
     */
    private void enableControls(boolean enable) {
        Component[] settingsComponents = pnlSettings.getComponents();
        Component[] gameModeComponents = pnlGameMode.getComponents();
        
        for(int i = 0; i < settingsComponents.length; i++) {
            settingsComponents[i].setEnabled(enable);
        }
        
        for(int i = 0; i < gameModeComponents.length; i++) {
            gameModeComponents[i].setEnabled(enable);
        }
    }
    
    
    /**
     * Finds how much XP a player has earned after collecting a gem
     * Calculated based on segments collected, speed, and grid size
     */
    private int calculateXP() {
        
        // Base XP (game speed)
        int xp = 0;
        switch(sliderSpeed.getValue()) {
            case 1:
                xp = 1;
                break;
            case 2:
                xp = 2;
                break;
            case 3:
                xp = 3;
                break;
            case 4:
                xp = 5;
                break;
            case 5:
                xp = 7;
                break;
            case 6:
                xp = 9;
                break;
            case 7:
                xp = 12;
                break;
            case 8:
                xp = 15;
                break;
            case 9:
                xp = 20;
                break;
            case 10:
                xp = 25;
                break;
            case 11:
                xp = 30;
                break;
        }
        
        
        // Grid Size
        if(gridSize > 5) { xp += 3; }
        if(gridSize < 15) { xp += 3; }
        
        
        // Wrap
        if(cbWrap.isSelected()) { xp /= 2; }
        
        
        // Segments
        xp *= ((plr.segmentCount() / 10) + 1);
        
        
        return xp;
    }
    
    
    /**
     * Updates the base XP label
     */
    private void updateXPLabel() {
        
        // Base XP (game speed)
        int xp = 0;
        switch(sliderSpeed.getValue()) {
            case 1:
                xp = 1;
                break;
            case 2:
                xp = 2;
                break;
            case 3:
                xp = 3;
                break;
            case 4:
                xp = 5;
                break;
            case 5:
                xp = 7;
                break;
            case 6:
                xp = 9;
                break;
            case 7:
                xp = 12;
                break;
            case 8:
                xp = 15;
                break;
            case 9:
                xp = 20;
                break;
            case 10:
                xp = 25;
                break;
            case 11:
                xp = 30;
                break;
        }
        
        
        // Grid Size
        if(sliderGridSize.getValue() > 5) { xp += 3; }
        if(sliderGridSize.getValue() < 15) { xp += 3; }
        
        
        // Wrap
        if(cbWrap.isSelected()) { xp /= 2; }
        
        
        lblBaseXP.setText("Base XP: " + xp);
    }
    
    
    
    
    
    
    
    
     //<editor-fold defaultstate="collapsed" desc=" Auto-generated stuff I don't care about">
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnakeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnakeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnakeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnakeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SnakeForm().setVisible(true);
            }
        });
    }

    //</editor-fold>
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnStart;
    private javax.swing.ButtonGroup buttonGroupGameMode;
    private javax.swing.JCheckBox cbShowGrid;
    private javax.swing.JCheckBox cbWrap;
    private javax.swing.JLabel lblBaseXP;
    private javax.swing.JLabel lblGridSize;
    private javax.swing.JLabel lblSpeed;
    private javax.swing.JPanel pnlGameMode;
    private javax.swing.JLayeredPane pnlMain;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JRadioButton rbClassic;
    private javax.swing.JRadioButton rbCrazy;
    private javax.swing.JRadioButton rbSurvival;
    private javax.swing.JSlider sliderGridSize;
    private javax.swing.JSlider sliderSpeed;
    // End of variables declaration//GEN-END:variables
}
